{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./dist/vector2.js","webpack:///./dist/draw.js","webpack:///./dist/rgb.js","webpack:///./dist/lightsource.js","webpack:///./dist/renderconfig.js","webpack:///./dist/grid.js","webpack:///./dist/material.js","webpack:///./dist/prism.js","webpack:///./dist/xyz.js","webpack:///./dist/wavelength.js","webpack:///./dist/app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Vector2","[object Object]","x","y","this","Math","atan2","theta","cos","sin","k","rhs","EquilateralTriangle","center","radius","rotation","PI","drawLine","points","context","color","prev","length","current","beginPath","strokeStyle","toString","moveTo","lineTo","stroke","closePath","RGB","g","b","min","max","padStart","lightsource_LightSource","position","spectrum","config","blend","map","w","toRGB","reduce","a","floor","endPoint","fromRadians","scale","plus","renderconfig_RenderConfig","backgroundColor","lineColor","lineWidth","lightsourceColor","lightsourceRadius","grid_Grid","lights","prisms","fillStyle","fillRect","canvas","width","height","concat","obj","draw","timeDelta","console","log","MATERIAL","SCHOTT_BK7","material","coeffs","materials","b1","b2","b3","c1","c2","c3","wavelength","sqrt","prism_Prism","vertices","xyz_XYZ","z","gammaCorrection","u","abs","wavelength_Wavelength","toXYZ","t1","t2","t3","exp","resize","grid","window","innerWidth","innerHeight","prismCenter","lightsources","pos","document","addEventListener","createElement","body","appendChild","getContext","lastRender","Date","getTime","setInterval","startTime","update","render"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * Two dimensional vector.\n */\nexport class Vector2 {\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Calculate direction of vector.\n     * @return rotational orientation of vector in radians\n     */\n    toRadians() {\n        return Math.atan2(this.y, this.x);\n    }\n    /**\n     * Create a unit vector given an angle.\n     * @param theta angle in radians\n     * @return unit vector with direction theta\n     */\n    static fromRadians(theta) {\n        return new Vector2(Math.cos(theta), Math.sin(theta));\n    }\n    /**\n     * Creates a new Vector  from this which is scaled by the given constant\n     * @param scale the scale for the Vector2\n     * @return The longer Vector2\n     */\n    scale(k) {\n        return new Vector2(this.x * k, this.y * k);\n    }\n    /**\n     * Returns a new Vector2 which is the current Vector2 moved by this offset in both x and y\n     * @param The position offset\n     * @return The relocated Vector2\n     */\n    plus(rhs) {\n        return new Vector2(this.x + rhs.x, this.y + rhs.y);\n    }\n}\n/**\n * Create a equalateral triangle given a center, radius, and a rotation\n * @param center center point of the triangle\n * @param radius the distance from the center to the vertices\n * @param rotation the rotation of the triangle\n * @return the three Vector2 which make up the triangle\n */\nexport function EquilateralTriangle(center, radius, rotation = 0) {\n    let x = center.x;\n    let y = center.y;\n    return [\n        new Vector2(x - radius * Math.sin(rotation), y - radius * Math.cos(rotation)),\n        new Vector2(x - radius * Math.sin(rotation + (2 * Math.PI) / 3), y - radius * Math.cos(rotation + (2 * Math.PI) / 3)),\n        new Vector2(x - radius * Math.sin(rotation + (4 * Math.PI) / 3), y - radius * Math.cos(rotation + (4 * Math.PI) / 3)),\n    ];\n}\n//# sourceMappingURL=vector2.js.map","/**\n * Draw a line between a list of vertices\n * @param points a list of points to draw lines between, including between the first and last vertex\n * @param condig config for styling the rendering\n */\nexport function drawLine(points, context, color) {\n    let prev = points[points.length - 1];\n    for (let current of points) {\n        context.beginPath();\n        context.strokeStyle = color.toString();\n        context.moveTo(prev.x, prev.y);\n        context.lineTo(current.x, current.y);\n        context.stroke();\n        context.closePath();\n        prev = current;\n    }\n}\n//# sourceMappingURL=draw.js.map","/**\n * sRGB Color Model.\n */\nexport class RGB {\n    constructor(r = 0, g = 0, b = 0) {\n        this.r = Math.min(Math.max(r, 0), 255);\n        this.g = Math.min(Math.max(g, 0), 255);\n        this.b = Math.min(Math.max(b, 0), 255);\n    }\n    /**\n     * Creates a hex representation of the RGB value\n     * @returns the string in hex: #XXXXXX\n     */\n    toString() {\n        return ('#' +\n            this.r.toString(16).padStart(2, '0') +\n            this.g.toString(16).padStart(2, '0') +\n            this.b.toString(16).padStart(2, '0'));\n    }\n}\n//# sourceMappingURL=rgb.js.map","import { Vector2 } from './vector2';\nimport { drawLine } from './draw';\nimport { RGB } from './rgb';\n/**\n * A LightSource which emits Photons in a direction\n */\nexport class LightSource {\n    constructor(position = new Vector2(0, 0), rotation = 0, spectrum = []) {\n        this.position = position;\n        this.spectrum = spectrum;\n        this.rotation = rotation;\n    }\n    /**\n     * Draws the LightSource's beam\n     * @param context The rendering context to draw width\n     * @param config The render config which defines styles and such\n     */\n    draw(context, config) {\n        if (this.spectrum.length < 1)\n            return;\n        const avg = (a, b) => {\n            return new RGB(Math.floor((a.r + b.r) / 2), Math.floor((a.g + b.g) / 2), Math.floor((a.b + b.b) / 2));\n        };\n        const blend = this.spectrum.map(w => w.toRGB()).reduce(avg);\n        // TODO: Limit scale to first collision\n        const endPoint = Vector2.fromRadians(this.rotation)\n            .scale(300)\n            .plus(this.position);\n        drawLine([this.position, endPoint], context, blend);\n    }\n}\n//# sourceMappingURL=lightsource.js.map","import { RGB } from './rgb';\n/**\n * Holds color of lines, color of background and so on.\n * Defines the style of the render, for `themes`\n */\nexport class RenderConfig {\n    constructor(backgroundColor = '#000000', lineColor = new RGB(255, 255, 255), lineWidth = 10, lightsourceColor = '#FFFFFF', lightsourceRadius = 20) {\n        this.backgroundColor = backgroundColor;\n        this.lineColor = lineColor;\n        this.lineWidth = lineWidth;\n        this.lightsourceColor = lightsourceColor;\n        this.lightsourceRadius = lightsourceRadius;\n    }\n}\n//# sourceMappingURL=renderconfig.js.map","import { RenderConfig } from './renderconfig';\n/**\n * A grid for simulating light refraction\n * This is what can be considered the root object of the simulation\n */\nexport class Grid {\n    constructor(lights = [], prisms = [], config = new RenderConfig()) {\n        this.lights = lights;\n        this.prisms = prisms;\n        this.config = config;\n    }\n    /**\n     * Renders the grid with the given 2D context\n     * @param context The rendering context to use for rendering\n     */\n    render(context) {\n        context.fillStyle = this.config.backgroundColor;\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n        const drawables = this.lights.concat(this.prisms);\n        drawables.map(obj => obj.draw(context, this.config));\n    }\n    update(timeDelta) {\n        console.log('Sleep time: ' + timeDelta + 'ms');\n    }\n}\n//# sourceMappingURL=grid.js.map","import materials from './data/materials.json';\n/**\n * Material name constants.\n */\nexport var MATERIAL;\n(function (MATERIAL) {\n    MATERIAL[\"SCHOTT_BK7\"] = \"SCHOTT_BK7\";\n    MATERIAL[\"SCHOTT_BAF10\"] = \"SCHOTT_BAF10\";\n})(MATERIAL || (MATERIAL = {}));\n/**\n * Material defined by Sellmeier coefficients.\n */\nexport class Material {\n    constructor(material = MATERIAL.SCHOTT_BK7) {\n        const coeffs = materials[material];\n        this.b1 = coeffs[0];\n        this.b2 = coeffs[1];\n        this.b3 = coeffs[2];\n        this.c1 = coeffs[3];\n        this.c2 = coeffs[4];\n        this.c3 = coeffs[5];\n    }\n    /**\n     * Calculate the refractive index of the material for a given wavelength\n     * using the Sellmeier equation.\n     *\n     * @param wavelength Wavelength in vacuum\n     *\n     * @returns The refractive index of the material for a given wavelength.\n     */\n    refractiveIndex(wavelength) {\n        const a = (this.b1 * wavelength ** 2) / (wavelength ** 2 - this.c1);\n        const b = (this.b2 * wavelength ** 2) / (wavelength ** 2 - this.c2);\n        const c = (this.b3 * wavelength ** 2) / (wavelength ** 2 - this.c3);\n        return Math.sqrt(1 + a + b + c);\n    }\n}\n//# sourceMappingURL=material.js.map","import { Material } from './material';\nimport { drawLine } from './draw';\n// Schott BK7 glass\nconst SCHOTT_BK7 = new Material();\n/**\n * A prism for use in simulation\n */\nexport class Prism {\n    constructor(vertices, material = SCHOTT_BK7) {\n        this.vertices = vertices;\n        this.material = material;\n    }\n    draw(context, config) {\n        drawLine(this.vertices, context, config.lineColor);\n    }\n}\n//# sourceMappingURL=prism.js.map","import { RGB } from './rgb';\n/**\n * XYZ Color Model.\n */\nexport class XYZ {\n    constructor(x = 0, y = 0, z = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    /**\n     * Convert to sRGB w/ Standard Illuminant D65\n     * @returns RGB equivalent of XYZ object\n     */\n    toRGB() {\n        // Linear transformation for XYZ to RGB\n        let r = 3.2404542 * this.x - 1.5371385 * this.y - 0.4985314 * this.z;\n        let g = -0.969266 * this.x + 1.8760108 * this.y + 0.041556 * this.z;\n        let b = 0.0556434 * this.x - 0.2040259 * this.y + 1.0572252 * this.z;\n        // Gamma Correction\n        r = Math.floor(this.gammaCorrection(r) * 255);\n        g = Math.floor(this.gammaCorrection(g) * 255);\n        b = Math.floor(this.gammaCorrection(b) * 255);\n        return new RGB(r, g, b);\n    }\n    /**\n     * Gamma correction for RGB, r, g, and b, values assuming Standard Illuminant D65.\n     * https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)\n     * @param u value to be gamma corrected\n     * @returns gamma corrected value u\n     */\n    gammaCorrection(u) {\n        u = Math.max(u, 0);\n        if (Math.abs(u) < 0.0031308)\n            return 12.92 * u;\n        return 1.055 * u ** (1 / 2.4) - 0.055;\n    }\n}\n//# sourceMappingURL=xyz.js.map","import { XYZ } from './xyz';\n/**\n * Wavelength defined by nanometers.\n * Contains method for converting to the XYZ color model which in turn can be\n * converted into sRGB.\n */\nexport class Wavelength {\n    constructor(wavelength) {\n        this.value = wavelength;\n    }\n    /**\n     * Convert wavelength to RGB color model representation.\n     * @returns RGB color model representation\n     */\n    toRGB() {\n        return this.toXYZ().toRGB();\n    }\n    /**\n     * Convert wavelength to XYZ color model representation.\n     * @returns RGB color model representation\n     */\n    toXYZ() {\n        return new XYZ(this.x(), this.y(), this.z());\n    }\n    x() {\n        let t1 = (this.value - 442.0) * (this.value < 442.0 ? 0.0624 : 0.0374);\n        let t2 = (this.value - 599.8) * (this.value < 599.8 ? 0.0264 : 0.0323);\n        let t3 = (this.value - 501.1) * (this.value < 501.1 ? 0.049 : 0.0382);\n        return (0.362 * Math.exp(-0.5 * t1 * t1) +\n            1.056 * Math.exp(-0.5 * t2 * t2) -\n            0.065 * Math.exp(-0.5 * t3 * t3));\n    }\n    y() {\n        let t1 = (this.value - 568.8) * (this.value < 568.8 ? 0.0213 : 0.0247);\n        let t2 = (this.value - 530.9) * (this.value < 530.9 ? 0.0613 : 0.0322);\n        return 0.821 * Math.exp(-0.5 * t1 * t1) + 0.286 * Math.exp(-0.5 * t2 * t2);\n    }\n    z() {\n        let t1 = (this.value - 437.0) * (this.value < 437.0 ? 0.0845 : 0.0278);\n        let t2 = (this.value - 459.0) * (this.value < 459.0 ? 0.0385 : 0.0725);\n        return 1.217 * Math.exp(-0.5 * t1 * t1) + 0.681 * Math.exp(-0.5 * t2 * t2);\n    }\n}\n//# sourceMappingURL=wavelength.js.map","import { LightSource } from './lightsource';\nimport { Grid } from './grid';\nimport { Vector2, EquilateralTriangle } from './vector2';\nimport { Prism } from './prism';\nimport { Wavelength } from './wavelength';\nimport '../css/canvas.css';\nfunction resize(grid, context) {\n    const canvas = context.canvas;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const prismCenter = new Vector2(canvas.width * 0.7, canvas.height * 0.5);\n    let lightsources = [\n        new Vector2(canvas.width * 0.2 - 5, canvas.height * 0.2 - 5),\n        new Vector2(canvas.width * 0.5 - 5, canvas.height * 0.5 - 5),\n        new Vector2(canvas.width * 0.8 - 5, canvas.height * 0.8 - 5),\n        prismCenter,\n    ].map(pos => new LightSource(pos));\n    lightsources[1].spectrum = [new Wavelength(700), new Wavelength(400)];\n    let prisms = [EquilateralTriangle(prismCenter, 100)].map(vertices => new Prism(vertices));\n    grid.lights = lightsources;\n    grid.prisms = prisms;\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Darkside started');\n    let canvas = document.createElement('canvas');\n    document.body.appendChild(canvas);\n    let context = canvas.getContext('2d');\n    let grid = new Grid();\n    window.addEventListener('resize', () => {\n        resize(grid, context);\n    });\n    resize(grid, context);\n    const fps = 1;\n    var lastRender = new Date().getTime();\n    setInterval(() => {\n        var startTime = new Date().getTime();\n        var timeDelta = startTime - lastRender;\n        grid.update(timeDelta);\n        grid.render(context);\n        lastRender = new Date().getTime();\n        console.log('Update+render took: ' + (lastRender - startTime) + 'ms');\n    }, 1000 / fps);\n});\n//# sourceMappingURL=app.js.map"],"sourceRoot":""}