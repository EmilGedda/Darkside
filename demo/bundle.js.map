{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./dist/app.js","webpack:///./dist/draw.js","webpack:///./dist/grid.js","webpack:///./dist/lightsource.js","webpack:///./dist/material.js","webpack:///./dist/prism.js","webpack:///./dist/renderconfig.js","webpack:///./dist/vector2.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACd;AAC2B;AACX;AACd;AAChC;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAO;AACnC;AACA,YAAY,gDAAO;AACnB,YAAY,gDAAO;AACnB,YAAY,gDAAO;AACnB;AACA,qBAAqB,wDAAW;AAChC,kBAAkB,oEAAmB,wCAAwC,4CAAK;AAClF,mBAAmB,0CAAI;AACvB,uBAAuB,0DAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,+B;;;;;;;;;;;;AC7BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAA8C;AAC9C;AACA;AACA;AACA;AACO;AACP,uDAAuD,0DAAY;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAoC;AACpC;AACA;AACA;AACO;AACP,+BAA+B,gDAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACzBA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAsC;AACJ;AAClC;AACA,uBAAuB,kDAAQ;AAC/B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAQ;AAChB;AACA;AACA,iC;;;;;;;;;;;;AChBA;AAAA;AAAA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./dist/app.js\");\n","import { LightSource } from './lightsource';\nimport { Grid } from './grid';\nimport { Vector2, EquilateralTriangle } from './vector2';\nimport { RenderConfig } from './renderconfig';\nimport { Prism } from './prism';\nfunction render() {\n    let canvas = document.getElementById('canvas');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let context = canvas.getContext('2d');\n    const prismCenter = new Vector2(canvas.width * 0.7, canvas.height * 0.5);\n    let lightsources = [\n        new Vector2(canvas.width * 0.2 - 5, canvas.height * 0.2 - 5),\n        new Vector2(canvas.width * 0.5 - 5, canvas.height * 0.5 - 5),\n        new Vector2(canvas.width * 0.8 - 5, canvas.height * 0.8 - 5),\n        prismCenter,\n    ].map(pos => new LightSource(pos));\n    let prisms = [EquilateralTriangle(prismCenter, 100)].map(vertices => new Prism(vertices));\n    let grid = new Grid(lightsources, prisms);\n    const config = new RenderConfig();\n    context.fillStyle = config.backgroundColor;\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    grid.render(context);\n}\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('Darkside started');\n    render();\n});\nwindow.addEventListener('resize', render);\n//# sourceMappingURL=app.js.map","/**\n * Draw a line between a list of vertices\n * @param points a list of points to draw lines between, including between the first and last vertex\n * @param condig config for styling the rendering\n */\nexport function drawLine(points, context, config) {\n    let prev = points[points.length - 1];\n    for (let current of points) {\n        context.beginPath();\n        context.strokeStyle = config.lineColor;\n        context.moveTo(prev.x, prev.y);\n        context.lineTo(current.x, current.y);\n        context.stroke();\n        context.closePath();\n        prev = current;\n    }\n}\n//# sourceMappingURL=draw.js.map","import { RenderConfig } from './renderconfig';\n/**\n * A grid for simulating light refraction\n * This is what can be considered the root object of the simulation\n */\nexport class Grid {\n    constructor(lights = [], prisms = [], config = new RenderConfig()) {\n        this.lights = lights;\n        this.prisms = prisms;\n        this.config = config;\n    }\n    /**\n     * Adds a LightSource to the grid\n     * @param light The LightSource to add\n     */\n    addLightSource(light) {\n        this.lights.push(light);\n    }\n    /**\n     * Adds a Prism to the grid\n     * @param prism The Prism to add\n     */\n    addPrism(prism) {\n        this.prisms.push(prism);\n    }\n    /**\n     * Renders the grid with the given 2D context\n     * @param context The rendering context to use for rendering\n     */\n    render(context) {\n        const drawables = this.prisms.concat(this.lights);\n        drawables.map(obj => obj.draw(context, this.config));\n    }\n}\n//# sourceMappingURL=grid.js.map","import { Vector2 } from './vector2';\n/**\n * A LightSource which emits Photons in a direction\n */\nexport class LightSource {\n    constructor(position = new Vector2(0, 0), rotation = 0, spectrum = []) {\n        this.position = position;\n        this.spectrum = spectrum;\n        this.rotation = rotation;\n    }\n    draw(context, config) {\n        const x = this.position.x;\n        const y = this.position.y;\n        const radius = config.lightsourceRadius;\n        let gradient = context.createRadialGradient(x, y, radius, x, y, radius * 0.5);\n        gradient.addColorStop(0, 'rgba(255, 255, 255, 0)'); // TODO take this from RenderConfig\n        gradient.addColorStop(1, config.lightsourceColor);\n        context.beginPath();\n        context.fillRect(x - radius, y - radius, radius * 2, radius * 2);\n        context.arc(x, y, config.lightsourceRadius, 0, 2 * Math.PI);\n        context.fillStyle = gradient;\n        context.fill();\n        context.closePath();\n    }\n}\n//# sourceMappingURL=lightsource.js.map","/**\n * Material defined by Sellmeier coefficients.\n */\nexport class Material {\n    constructor(b1, b2, b3, c1, c2, c3) {\n        this.b1 = b1;\n        this.b2 = b2;\n        this.b3 = b3;\n        this.c1 = c1;\n        this.c2 = c2;\n        this.c3 = c3;\n    }\n    /**\n     * Calculate the refractive index of the material for a given wavelength\n     * using the Sellmeier equation.\n     *\n     * @param wavelength Wavelength in vacuum\n     *\n     * @returns The refractive index of the material for a given wavelength.\n     */\n    refractiveIndex(wavelength) {\n        const a = (this.b1 * wavelength ** 2) / (wavelength ** 2 - this.c1);\n        const b = (this.b2 * wavelength ** 2) / (wavelength ** 2 - this.c2);\n        const c = (this.b3 * wavelength ** 2) / (wavelength ** 2 - this.c3);\n        return Math.sqrt(1 + a + b + c);\n    }\n}\n//# sourceMappingURL=material.js.map","import { Material } from './material';\nimport { drawLine } from './draw';\n// Schott BK7 glass\nconst SCHOTT_BK7 = new Material(1.03961212, 0.231792344, 0.231792344, 6.00069867e-3, 2.00179144e-2, 1.03560653e2);\n/**\n * A prism for use in simulation\n */\nexport class Prism {\n    constructor(vertices, material = SCHOTT_BK7) {\n        this.vertices = vertices;\n        this.material = material;\n    }\n    draw(context, config) {\n        drawLine(this.vertices, context, config);\n    }\n}\n//# sourceMappingURL=prism.js.map","/**\n * Holds color of lines, color of background and so on.\n * Defines the style of the render, for `themes`\n */\nexport class RenderConfig {\n    constructor(backgroundColor = '#000000', lineColor = '#FFFFFF', lineWidth = 10, lightsourceColor = '#FFFFFF', lightsourceRadius = 20) {\n        this.backgroundColor = backgroundColor;\n        this.lineColor = lineColor;\n        this.lineWidth = lineWidth;\n        this.lightsourceColor = lightsourceColor;\n        this.lightsourceRadius = lightsourceRadius;\n    }\n}\n//# sourceMappingURL=renderconfig.js.map","/**\n * Two dimensional vector.\n */\nexport class Vector2 {\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    /**\n     * Calculate direction of vector.\n     * @return rotational orientation of vector in radians\n     */\n    toRadians() {\n        return Math.atan2(this.y, this.x);\n    }\n    /**\n     * Create a unit vector given an angle.\n     * @param theta angle in radians\n     * @return unit vector with direction theta\n     */\n    static fromRadians(theta) {\n        return new Vector2(Math.cos(theta), Math.sin(theta));\n    }\n}\n/**\n * Create a equalateral triangle given a center, radius, and a rotation\n * @param center center point of the triangle\n * @param radius the distance from the center to the vertices\n * @param rotation the rotation of the triangle\n * @return the three Vector2 which make up the triangle\n */\nexport function EquilateralTriangle(center, radius, rotation = 0) {\n    let x = center.x;\n    let y = center.y;\n    return [\n        new Vector2(x - radius * Math.sin(rotation), y - radius * Math.cos(rotation)),\n        new Vector2(x - radius * Math.sin(rotation + (2 * Math.PI) / 3), y - radius * Math.cos(rotation + (2 * Math.PI) / 3)),\n        new Vector2(x - radius * Math.sin(rotation + (4 * Math.PI) / 3), y - radius * Math.cos(rotation + (4 * Math.PI) / 3)),\n    ];\n}\n//# sourceMappingURL=vector2.js.map"],"sourceRoot":""}